// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package gen

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createPlayerStmt, err = db.PrepareContext(ctx, createPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlayer: %w", err)
	}
	if q.playerByEmailOrUsernameStmt, err = db.PrepareContext(ctx, playerByEmailOrUsername); err != nil {
		return nil, fmt.Errorf("error preparing query PlayerByEmailOrUsername: %w", err)
	}
	if q.playerByIDStmt, err = db.PrepareContext(ctx, playerByID); err != nil {
		return nil, fmt.Errorf("error preparing query PlayerByID: %w", err)
	}
	if q.updatePasswordStmt, err = db.PrepareContext(ctx, updatePassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePassword: %w", err)
	}
	if q.verifyEmailStmt, err = db.PrepareContext(ctx, verifyEmail); err != nil {
		return nil, fmt.Errorf("error preparing query VerifyEmail: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createPlayerStmt != nil {
		if cerr := q.createPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlayerStmt: %w", cerr)
		}
	}
	if q.playerByEmailOrUsernameStmt != nil {
		if cerr := q.playerByEmailOrUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing playerByEmailOrUsernameStmt: %w", cerr)
		}
	}
	if q.playerByIDStmt != nil {
		if cerr := q.playerByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing playerByIDStmt: %w", cerr)
		}
	}
	if q.updatePasswordStmt != nil {
		if cerr := q.updatePasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePasswordStmt: %w", cerr)
		}
	}
	if q.verifyEmailStmt != nil {
		if cerr := q.verifyEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing verifyEmailStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	createPlayerStmt            *sql.Stmt
	playerByEmailOrUsernameStmt *sql.Stmt
	playerByIDStmt              *sql.Stmt
	updatePasswordStmt          *sql.Stmt
	verifyEmailStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		createPlayerStmt:            q.createPlayerStmt,
		playerByEmailOrUsernameStmt: q.playerByEmailOrUsernameStmt,
		playerByIDStmt:              q.playerByIDStmt,
		updatePasswordStmt:          q.updatePasswordStmt,
		verifyEmailStmt:             q.verifyEmailStmt,
	}
}
